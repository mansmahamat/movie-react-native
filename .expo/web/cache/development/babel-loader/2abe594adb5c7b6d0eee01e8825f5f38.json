{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utilities\";\nexport var Action = {\n  GET_MOVIES: \"fetch_movies\",\n  GET_TV_SERIES: \"fetch_tv_series\",\n  GET_SERIES: \"fetch_series\",\n  GET_ON_AIR_SERIES: \"fetch_on_air_series\",\n  ADD_TO_WISHLIST: \"add_to_wishlist\",\n  REMOVE_FROM_WISHLIST: \"remove_from_wishlist\",\n  ADD_TO_WISH_LIST_SERIE: \"add_to_wishlist_serie\",\n  REMOVE_FROM_WISHLIST_SERIE: \"remove_from_wishlist_serie\",\n  ON_ERROR: \"on_error\",\n  GET_TOP_RATED_MOVIES: 'fetch_top_rated_movies',\n  GET_UPCOMING_MOVIES: 'fetch_upcoming_movies'\n};\nexport var fetchSeries = function fetchSeries() {\n  try {\n    return function _callee(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/tv/popular?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=1\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_SERIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch series\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchTvSeries = function fetchTvSeries() {\n  try {\n    return function _callee2(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=1\"));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_TV_SERIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch TV series\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchOnAirSeries = function fetchOnAirSeries() {\n  try {\n    return function _callee3(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/tv/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=3\"));\n\n            case 2:\n              response = _context3.sent;\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_ON_AIR_SERIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch series\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch on air series\"\n    });\n  }\n};\nexport var fetchMovies = function fetchMovies() {\n  try {\n    return function _callee4(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL + \"/watch/movie\"));\n\n            case 2:\n              response = _context4.sent;\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchTopRatedMovies = function fetchTopRatedMovies() {\n  try {\n    return function _callee5(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/movie/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6\"));\n\n            case 2:\n              response = _context5.sent;\n\n              if (response.data.results) {\n                dispatch({\n                  type: Action.GET_TOP_RATED_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch top movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchUpcomingMovies = function fetchUpcomingMovies() {\n  try {\n    return function _callee6(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/discover/movie?api_key=afd804ef50f1e6b1ad6f29209e9395e6&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_watch_monetization_types=flatrate\"));\n\n            case 2:\n              response = _context6.sent;\n\n              if (response.data.results) {\n                dispatch({\n                  type: Action.GET_UPCOMING_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch upcoming movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var addToWishList = function addToWishList(movie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.ADD_TO_WISHLIST,\n      payload: movie\n    });\n  };\n};\nexport var removeFromWishlist = function removeFromWishlist(movie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.REMOVE_FROM_WISHLIST,\n      payload: movie\n    });\n  };\n};\nexport var addToWishListSerie = function addToWishListSerie(serie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.ADD_TO_WISH_LIST_SERIE,\n      payload: serie\n    });\n  };\n};\nexport var removeFromWishlistSerie = function removeFromWishlistSerie(serie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.REMOVE_FROM_WISHLIST_SERIE,\n      payload: serie\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mansour/Desktop/Perso/movie-react-native/src/redux/actions.js"],"names":["axios","BASE_URL","Action","GET_MOVIES","GET_TV_SERIES","GET_SERIES","GET_ON_AIR_SERIES","ADD_TO_WISHLIST","REMOVE_FROM_WISHLIST","ADD_TO_WISH_LIST_SERIE","REMOVE_FROM_WISHLIST_SERIE","ON_ERROR","GET_TOP_RATED_MOVIES","GET_UPCOMING_MOVIES","fetchSeries","dispatch","get","response","data","type","payload","results","err","fetchTvSeries","fetchOnAirSeries","fetchMovies","fetchTopRatedMovies","fetchUpcomingMovies","addToWishList","movie","removeFromWishlist","addToWishListSerie","serie","removeFromWishlistSerie"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { BASE_URL } from \"../utilities\";\n\nexport const Action = {\n  GET_MOVIES: \"fetch_movies\",\n  GET_TV_SERIES: \"fetch_tv_series\", \n  GET_SERIES: \"fetch_series\",\n  GET_ON_AIR_SERIES: \"fetch_on_air_series\",\n  ADD_TO_WISHLIST: \"add_to_wishlist\",\n  REMOVE_FROM_WISHLIST: \"remove_from_wishlist\",\n  ADD_TO_WISH_LIST_SERIE: \"add_to_wishlist_serie\",\n  REMOVE_FROM_WISHLIST_SERIE: \"remove_from_wishlist_serie\",\n  ON_ERROR: \"on_error\",\n  GET_TOP_RATED_MOVIES: 'fetch_top_rated_movies',\n  GET_UPCOMING_MOVIES: 'fetch_upcoming_movies'\n};\n\nexport const fetchSeries = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        \"https://api.themoviedb.org/3/tv/popular?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=1\"\n      );\n\n       \n      if (response.data) {\n        dispatch({\n          type: Action.GET_SERIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch series\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\",\n    });\n  }\n};\n\nexport const fetchTvSeries = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        \"https://api.themoviedb.org/3/tv/on_the_air?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=1\"\n      );\n\n       \n      if (response.data) {\n        dispatch({\n          type: Action.GET_TV_SERIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch TV series\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\",\n    });\n  }\n};\n\n\nexport const fetchOnAirSeries = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        \"https://api.themoviedb.org/3/tv/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6&page=3\"\n      );\n\n       \n      if (response.data) {\n        dispatch({\n          type: Action.GET_ON_AIR_SERIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch series\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch on air series\",\n    });\n  }\n};\n\nexport const fetchMovies = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        `${BASE_URL}/watch/movie`\n      );\n\n    //   console.log(response);\n      if (response.data) {\n        dispatch({\n          type: Action.GET_MOVIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch movies\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\",\n    });\n  }\n};\n\nexport const fetchTopRatedMovies = () => {\n    try {\n      return async (dispatch) => {\n        const response = await axios.get(\n          \"https://api.themoviedb.org/3/movie/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6\"\n        );\n  \n        // console.log(response.data.results);\n        if (response.data.results) {\n          dispatch({\n            type: Action.GET_TOP_RATED_MOVIES,\n            payload: response.data.results,\n          });\n        } else {\n          //throw error\n          dispatch({\n            type: Action.ON_ERROR,\n            payload: \"Unable to fetch top movies\",\n          });\n        }\n      };\n    } catch (err) {\n      //throw err\n      dispatch({\n        type: Action.ON_ERROR,\n        payload: \"Unable to fetch movies\",\n      });\n    }\n  };\n\n  export const fetchUpcomingMovies = () => {\n    try {\n      return async (dispatch) => {\n        const response = await axios.get(\n          \"https://api.themoviedb.org/3/discover/movie?api_key=afd804ef50f1e6b1ad6f29209e9395e6&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_watch_monetization_types=flatrate\"\n        );\n  \n        // console.log(response.data.results);\n        if (response.data.results) {\n          dispatch({\n            type: Action.GET_UPCOMING_MOVIES,\n            payload: response.data.results,\n          });\n        } else {\n          //throw error\n          dispatch({\n            type: Action.ON_ERROR,\n            payload: \"Unable to fetch upcoming movies\",\n          });\n        }\n      };\n    } catch (err) {\n      //throw error\n      dispatch({\n        type: Action.ON_ERROR,\n        payload: \"Unable to fetch movies\",\n      });\n    }\n  };\n\nexport const addToWishList = (movie) => (dispatch) => {\n  dispatch({\n    type: Action.ADD_TO_WISHLIST,\n    payload: movie,\n  });\n};\n\nexport const removeFromWishlist = (movie) => (dispatch) => {\n  dispatch({\n    type: Action.REMOVE_FROM_WISHLIST,\n    payload: movie,\n  });\n};\n\nexport const addToWishListSerie = (serie) => (dispatch) => {\n  dispatch({\n    type: Action.ADD_TO_WISH_LIST_SERIE,\n    payload: serie,\n  });\n};\n\nexport const removeFromWishlistSerie = (serie) => (dispatch) => {\n  dispatch({\n    type: Action.REMOVE_FROM_WISHLIST_SERIE,\n    payload: serie,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}