{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mansour/Desktop/React_Native_Local_Storage_YT/node_modules/react-native-autocomplete-input/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nexport var AutocompleteInput = function AutocompleteInput(props) {\n  function renderResultList(data, listProps) {\n    var style = listProps.style,\n        flatListProps = _objectWithoutProperties(listProps, [\"style\"]);\n\n    return React.createElement(FlatList, _extends({\n      data: data,\n      style: [styles.list, style]\n    }, flatListProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  function renderTextInput() {\n    var renderFunction = props.renderTextInput,\n        style = props.style;\n\n    var textProps = _objectSpread({\n      style: [styles.input, style]\n    }, props);\n\n    return renderFunction(textProps);\n  }\n\n  var data = props.data,\n      containerStyle = props.containerStyle,\n      hideResults = props.hideResults,\n      inputContainerStyle = props.inputContainerStyle,\n      listContainerStyle = props.listContainerStyle,\n      onShowResults = props.onShowResults,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      flatListProps = props.flatListProps;\n  var showResults = data.length > 0;\n  onShowResults && onShowResults(showResults);\n  return React.createElement(View, {\n    style: [styles.container, containerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.inputContainer, inputContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, renderTextInput(props)), !hideResults && React.createElement(View, {\n    style: listContainerStyle,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, showResults && renderResultList(data, flatListProps)));\n};\nAutocompleteInput.propTypes = _objectSpread(_objectSpread({}, TextInput.propTypes), {}, {\n  containerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  data: PropTypes.array,\n  flatListProps: FlatList.propTypes || PropTypes.object,\n  hideResults: PropTypes.bool,\n  inputContainerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  keyboardShouldPersistTaps: PropTypes.oneOfType([PropTypes.oneOf(['always', 'handeld', 'never']), PropTypes.bool]),\n  listContainerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  onShowResults: PropTypes.func,\n  onStartShouldSetResponderCapture: PropTypes.func,\n  renderTextInput: PropTypes.func\n});\n\nvar defaultKeyExtractor = function defaultKeyExtractor(_, index) {\n  return \"key-\" + index;\n};\n\nvar defaultRenderItem = function defaultRenderItem(_ref) {\n  var item = _ref.item;\n  return React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  }, item);\n};\n\nAutocompleteInput.defaultProps = {\n  data: [],\n  keyboardShouldPersistTaps: 'always',\n  onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {\n    return false;\n  },\n  renderTextInput: function renderTextInput(props) {\n    return React.createElement(TextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 31\n      }\n    }));\n  },\n  flatListProps: {\n    renderItem: defaultRenderItem,\n    keyExtractor: defaultKeyExtractor\n  }\n};\nvar border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1\n};\nvar androidStyles = {\n  container: {\n    flex: 1\n  },\n  inputContainer: _objectSpread(_objectSpread({}, border), {}, {\n    marginBottom: 0\n  }),\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0\n  })\n};\nvar iosStyles = {\n  container: {\n    zIndex: 1\n  },\n  inputContainer: _objectSpread({}, border),\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0\n  })\n};\nvar styles = StyleSheet.create(_objectSpread({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  }\n}, Platform.select({\n  android: androidStyles,\n  ios: iosStyles,\n  default: iosStyles\n})));\nexport default AutocompleteInput;","map":{"version":3,"sources":["/Users/mansour/Desktop/React_Native_Local_Storage_YT/node_modules/react-native-autocomplete-input/index.js"],"names":["React","PropTypes","AutocompleteInput","props","renderResultList","data","listProps","style","flatListProps","styles","list","renderTextInput","renderFunction","textProps","input","containerStyle","hideResults","inputContainerStyle","listContainerStyle","onShowResults","onStartShouldSetResponderCapture","showResults","length","container","inputContainer","propTypes","TextInput","ViewPropTypes","object","array","FlatList","bool","keyboardShouldPersistTaps","oneOfType","oneOf","func","defaultKeyExtractor","_","index","defaultRenderItem","item","defaultProps","renderItem","keyExtractor","border","borderColor","borderRadius","borderWidth","androidStyles","flex","marginBottom","backgroundColor","borderTopWidth","margin","marginTop","iosStyles","zIndex","height","paddingLeft","left","position","right","StyleSheet","create","Platform","select","android","ios","default"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FlatList, Platform, StyleSheet, Text, TextInput, View, ViewPropTypes } from 'react-native';\n\nexport const AutocompleteInput = (props) => {\n  function renderResultList(data, listProps) {\n    const { style, ...flatListProps } = listProps;\n\n    return <FlatList data={data} style={[styles.list, style]} {...flatListProps} />;\n  }\n\n  function renderTextInput() {\n    const { renderTextInput: renderFunction, style } = props;\n    const textProps = {\n      style: [styles.input, style],\n      ...props,\n    };\n\n    return renderFunction(textProps);\n  }\n\n  const {\n    data,\n    containerStyle,\n    hideResults,\n    inputContainerStyle,\n    listContainerStyle,\n    onShowResults,\n    onStartShouldSetResponderCapture,\n    flatListProps,\n  } = props;\n\n  const showResults = data.length > 0;\n  // Notify listener if the suggestion will be shown.\n  onShowResults && onShowResults(showResults);\n  return (\n    <View style={[styles.container, containerStyle]}>\n      <View style={[styles.inputContainer, inputContainerStyle]}>{renderTextInput(props)}</View>\n      {!hideResults && (\n        <View\n          style={listContainerStyle}\n          onStartShouldSetResponderCapture={onStartShouldSetResponderCapture}\n        >\n          {showResults && renderResultList(data, flatListProps)}\n        </View>\n      )}\n    </View>\n  );\n};\n\nAutocompleteInput.propTypes = {\n  ...TextInput.propTypes,\n  /**\n   * These styles will be applied to the container which\n   * surrounds the autocomplete component.\n   */\n  containerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  /**\n   * Assign an array of data objects which should be\n   * rendered in respect to the entered text.\n   */\n  data: PropTypes.array,\n  /**\n   * Props which can be applied to result `FlatList`.\n   */\n  flatListProps: FlatList.propTypes || PropTypes.object,\n  /**\n   * Set to `true` to hide the suggestion list.\n   */\n  hideResults: PropTypes.bool,\n  /**\n   * These styles will be applied to the container which surrounds\n   * the textInput component.\n   */\n  inputContainerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  /**\n   * Set `keyboardShouldPersistTaps` to true if RN version is <= 0.39.\n   */\n  keyboardShouldPersistTaps: PropTypes.oneOfType([\n    PropTypes.oneOf(['always', 'handeld', 'never']),\n    PropTypes.bool,\n  ]),\n  /**\n   * These style will be applied to the result list.\n   */\n  listContainerStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  /**\n   * `onShowResults` will be called when list is going to\n   * show/hide results.\n   */\n  onShowResults: PropTypes.func,\n  /**\n   * `onShowResults` will be called when list is going to\n   * show/hide results.\n   */\n  onStartShouldSetResponderCapture: PropTypes.func,\n  /**\n   * renders custom TextInput. All props passed to this function.\n   */\n  renderTextInput: PropTypes.func,\n};\n\nconst defaultKeyExtractor = (_, index) => `key-${index}`;\nconst defaultRenderItem = ({ item }) => <Text>{item}</Text>;\n\nAutocompleteInput.defaultProps = {\n  data: [],\n  keyboardShouldPersistTaps: 'always',\n  onStartShouldSetResponderCapture: () => false,\n  renderTextInput: (props) => <TextInput {...props} />,\n  flatListProps: {\n    renderItem: defaultRenderItem,\n    keyExtractor: defaultKeyExtractor,\n  },\n};\n\nconst border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1,\n};\n\nconst androidStyles = {\n  container: {\n    flex: 1,\n  },\n  inputContainer: {\n    ...border,\n    marginBottom: 0,\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0,\n  },\n};\n\nconst iosStyles = {\n  container: {\n    zIndex: 1,\n  },\n  inputContainer: {\n    ...border,\n  },\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3,\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n  },\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3,\n  },\n  ...Platform.select({\n    android: androidStyles,\n    ios: iosStyles,\n    default: iosStyles,\n  }),\n});\n\nexport default AutocompleteInput;\n"]},"metadata":{},"sourceType":"module"}