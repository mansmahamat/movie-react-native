{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utilities\";\nexport var Action = {\n  GET_MOVIES: \"fetch_movies\",\n  GET_SERIES: \"fetch_series\",\n  ADD_TO_WISHLIST: \"add_to_wishlist\",\n  REMOVE_FROM_WISHLIST: \"remove_from_wishlist\",\n  ON_ERROR: \"on_error\",\n  GET_TOP_RATED_MOVIES: 'fetch_top_rated_movies',\n  GET_UPCOMING_MOVIES: 'fetch_upcoming_movies'\n};\nexport var fetchSeries = function fetchSeries() {\n  try {\n    return function _callee(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/tv/popular?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=1\"));\n\n            case 2:\n              response = _context.sent;\n              console.log(response.data);\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_SERIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch series\"\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchMovies = function fetchMovies() {\n  try {\n    return function _callee2(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL + \"/watch/movie\"));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.data) {\n                dispatch({\n                  type: Action.GET_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchTopRatedMovies = function fetchTopRatedMovies() {\n  try {\n    return function _callee3(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/movie/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=2\"));\n\n            case 2:\n              response = _context3.sent;\n\n              if (response.data.results) {\n                dispatch({\n                  type: Action.GET_TOP_RATED_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch top movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var fetchUpcomingMovies = function fetchUpcomingMovies() {\n  try {\n    return function _callee4(dispatch) {\n      var response;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(\"https://api.themoviedb.org/3/movie/upcoming?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=1\"));\n\n            case 2:\n              response = _context4.sent;\n\n              if (response.data.results) {\n                dispatch({\n                  type: Action.GET_UPCOMING_MOVIES,\n                  payload: response.data.results\n                });\n              } else {\n                dispatch({\n                  type: Action.ON_ERROR,\n                  payload: \"Unable to fetch upcoming movies\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (err) {\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\"\n    });\n  }\n};\nexport var addToWishList = function addToWishList(movie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.ADD_TO_WISHLIST,\n      payload: movie\n    });\n  };\n};\nexport var removeFromWishlist = function removeFromWishlist(movie) {\n  return function (dispatch) {\n    dispatch({\n      type: Action.REMOVE_FROM_WISHLIST,\n      payload: movie\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mansour/Desktop/React_Native_Local_Storage_YT/src/redux/actions.js"],"names":["axios","BASE_URL","Action","GET_MOVIES","GET_SERIES","ADD_TO_WISHLIST","REMOVE_FROM_WISHLIST","ON_ERROR","GET_TOP_RATED_MOVIES","GET_UPCOMING_MOVIES","fetchSeries","dispatch","get","response","console","log","data","type","payload","results","err","fetchMovies","fetchTopRatedMovies","fetchUpcomingMovies","addToWishList","movie","removeFromWishlist"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { BASE_URL } from \"../utilities\";\n\nexport const Action = {\n  GET_MOVIES: \"fetch_movies\",\n  GET_SERIES: \"fetch_series\",\n  ADD_TO_WISHLIST: \"add_to_wishlist\",\n  REMOVE_FROM_WISHLIST: \"remove_from_wishlist\",\n  ON_ERROR: \"on_error\",\n  GET_TOP_RATED_MOVIES: 'fetch_top_rated_movies',\n  GET_UPCOMING_MOVIES: 'fetch_upcoming_movies'\n};\n\nexport const fetchSeries = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        \"https://api.themoviedb.org/3/tv/popular?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=1\"\n      );\n\n       console.log(response.data);\n      if (response.data) {\n        dispatch({\n          type: Action.GET_SERIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch series\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\",\n    });\n  }\n};\n\nexport const fetchMovies = () => {\n  try {\n    return async (dispatch) => {\n      const response = await axios.get(\n        `${BASE_URL}/watch/movie`\n      );\n\n    //   console.log(response);\n      if (response.data) {\n        dispatch({\n          type: Action.GET_MOVIES,\n          payload: response.data.results,\n        });\n      } else {\n        //throw error\n        dispatch({\n          type: Action.ON_ERROR,\n          payload: \"Unable to fetch movies\",\n        });\n      }\n    };\n  } catch (err) {\n    //throw error\n    dispatch({\n      type: Action.ON_ERROR,\n      payload: \"Unable to fetch movies\",\n    });\n  }\n};\n\nexport const fetchTopRatedMovies = () => {\n    try {\n      return async (dispatch) => {\n        const response = await axios.get(\n          \"https://api.themoviedb.org/3/movie/top_rated?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=2\"\n        );\n  \n        // console.log(response.data.results);\n        if (response.data.results) {\n          dispatch({\n            type: Action.GET_TOP_RATED_MOVIES,\n            payload: response.data.results,\n          });\n        } else {\n          //throw error\n          dispatch({\n            type: Action.ON_ERROR,\n            payload: \"Unable to fetch top movies\",\n          });\n        }\n      };\n    } catch (err) {\n      //throw err\n      dispatch({\n        type: Action.ON_ERROR,\n        payload: \"Unable to fetch movies\",\n      });\n    }\n  };\n\n  export const fetchUpcomingMovies = () => {\n    try {\n      return async (dispatch) => {\n        const response = await axios.get(\n          \"https://api.themoviedb.org/3/movie/upcoming?api_key=afd804ef50f1e6b1ad6f29209e9395e6&language=fr-FR&page=1\"\n        );\n  \n        // console.log(response.data.results);\n        if (response.data.results) {\n          dispatch({\n            type: Action.GET_UPCOMING_MOVIES,\n            payload: response.data.results,\n          });\n        } else {\n          //throw error\n          dispatch({\n            type: Action.ON_ERROR,\n            payload: \"Unable to fetch upcoming movies\",\n          });\n        }\n      };\n    } catch (err) {\n      //throw error\n      dispatch({\n        type: Action.ON_ERROR,\n        payload: \"Unable to fetch movies\",\n      });\n    }\n  };\n\nexport const addToWishList = (movie) => (dispatch) => {\n  dispatch({\n    type: Action.ADD_TO_WISHLIST,\n    payload: movie,\n  });\n};\n\nexport const removeFromWishlist = (movie) => (dispatch) => {\n  dispatch({\n    type: Action.REMOVE_FROM_WISHLIST,\n    payload: movie,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}